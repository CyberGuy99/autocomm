from sys import argv
import json
import cirq
import cirq.contrib.qasm_import

DEFAULT_QUBITS_PER_NODE = 2

def aggregate(in_circ, node_map, node_array=None):
    return in_circ.copy()


def assign(in_circ, node_map, node_array=None):
    return in_circ.copy()

def schedule(in_circ, node_map, node_array=None):
    return in_circ.copy()

def map_to_nodes(num_nodes, in_circ):
    qubit_to_node = dict()
    node_array = []
    if num_nodes == 0:
        num_nodes = DEFAULT_QUBITS_PER_NODE * len(in_circ.all_qubits())

    qubits_per_node = len(in_circ.all_qubits()) // num_nodes
    for idx, q in enumerate(in_circ.all_qubits()):
        qubit_to_node[q] = idx // qubits_per_node
        node_array.append(idx // qubits_per_node)

    return qubit_to_node, node_array




def main(raw_input, in_type, num_nodes=0):
    if in_type > 3 or in_type < 0:
        print("Invalid input: input type should be integer between [0,3]")
        return None

    if in_type < 3:
        with open(raw_input) as f:
            input = f.read()
    else:
        input = raw_input
    
    input_circuit = import_circuit(input, in_type)
    node_map, node_arr = map_to_nodes(num_nodes, input_circuit)


    agg_circuit = aggregate(input_circuit)
    print(agg_circuit, node_map)

    assigned_circuit = assign(agg_circuit)
    print(assigned_circuit, node_map)

    scheduled_circuit = schedule(assigned_circuit)
    print(scheduled_circuit, node_map)

    return scheduled_circuit



# 0: json string input in cirq format (generated by cirq)
# 1: json string input in quirk format (generated by quirk)
# 2: qasm string input (experimental)
# 3: url input, quirk
def import_circuit(input, in_type=0):
    if in_type == 0:
        return cirq.read_json(json_text=input)
    if in_type == 1:
        return cirq.quirk_json_to_circuit(json.loads(input))
    if in_type == 2:
        return cirq.contrib.qasm_import(input)
    if in_type == 3:
        return cirq.quirk_url_to_circuit(input)



if __name__ == '__main__':
    if len(argv) < 3:
        print("Invalid input: expected 2 arguments")
        exit()

    raw_input = argv[1]
    in_type = int(argv[2])
    num_nodes = int(argv[3]) if len(argv) > 3 else 0

    main(raw_input, in_type, num_nodes)